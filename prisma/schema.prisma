// src/prisma/schema.prisma

// Definieer de datasourcenaam en provider voor SQLite
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // Verwijs naar de DATABASE_URL variabele in je .env bestand
}

generator client {
  provider = "prisma-client-js"
}

// ------------------- Models ---------------------

model User {
  id             String    @id @default(uuid()) // UUID voor User ID
  username       String    @unique
  password       String
  name           String
  email          String @unique
  phoneNumber    String
  profilePicture String? // Dit veld is optioneel
  pictureUrl     String?
  bookings       Booking[] @relation("UserBookings") // Relatie naar Bookings
  reviews        Review[]  @relation("UserReviews") // Relatie naar Reviews
  refreshToken   String? 
}

model Host {
  id             String     @id @default(cuid()) // Unieke ID voor de host
  username       String     @unique // Gebruikersnaam moet uniek zijn
  password       String // Het gehashte wachtwoord van de host
  name           String
  email          String     @unique
  phoneNumber    String // Telefoonnummer van de host
  profilePicture String? // Optioneel, profielafbeelding van de host
  aboutMe        String? // Optioneel, een korte bio over de host
  listings       Property[] @relation("HostProperties") // Verwijder onDelete: Cascade hier
}

model Property {
  id            String     @id @default(uuid())
  hostId        String
  title         String
  description   String
  location      String
  pricePerNight Decimal
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  host          Host       @relation("HostProperties", fields: [hostId], references: [id], onDelete: Cascade)
  amenities     Amenity[]  @relation("PropertyAmenities")
  bookings      Booking[]  @relation("PropertyBookings")
  reviews       Review[]   @relation("PropertyReviews")
  rating        Int
}

model Booking {
  id             String   @id @default(uuid()) // UUID voor Booking ID
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Int
  bookingStatus  String
  user           User     @relation("UserBookings", fields: [userId], references: [id], onDelete: Cascade) // Relatie naar User met Cascade bij delete
  property       Property @relation("PropertyBookings", fields: [propertyId], references: [id], onDelete: Cascade) // Relatie naar Property met Cascade bij delete
}

model Amenity {
  id         String     @id @default(uuid())
  name       String
  properties Property[] @relation("PropertyAmenities")
}

model Review {
  id         String   @id @default(uuid()) // UUID voor Review ID
  userId     String
  propertyId String
  rating     Int
  comment    String
  user       User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade) // Relatie naar User met Cascade bij delete
  property   Property @relation("PropertyReviews", fields: [propertyId], references: [id], onDelete: Cascade) // Relatie naar Property met Cascade bij delete
}
